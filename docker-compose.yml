version: '3.8'
services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ../postgres-data:/var/lib/postgresql/data

  minio:
    image: minio/minio
    expose:
      - "${MINIO_PORT}"
    ports:
      - "${MINIO_PORT}:${MINIO_PORT}"
      - "${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}"
    environment:
      MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/${MINIO_PORT}' || exit 1
      interval: 1s
      timeout: 10s
      retries: 5
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"

  minio-create-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      bash -c "
      mc alias set minio http://minio:${MINIO_PORT} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      if ! mc ls minio | grep --quiet ${MINIO_BUCKET_NAME}; then
        mc mb minio/${MINIO_BUCKET_NAME}
      else
        echo '${MINIO_BUCKET_NAME} already exists'
      fi
      "

  mlflow:
    build:
      context: .
      dockerfile: docker/Dockerfile.mlflow
    depends_on:
      - postgres
      - minio
    ports:
      - "${MLFLOW_PORT}:5000"
    environment:
      AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
      AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
      MLFLOW_S3_ENDPOINT_URL: http://minio:${MINIO_PORT}
    command: >
      mlflow server 
      --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      --artifacts-destination s3://${MINIO_BUCKET_NAME}/
      --host 0.0.0.0
      --port 5000